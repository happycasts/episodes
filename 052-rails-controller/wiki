A controller can thus be thought of as a middle man between models and views
rails g controller <enter> see what you get
rails g controller demo index
Move your logic in view to controller/helper, move your controller logic to model, 
controller_name -> Model_name -> Table_name
show method maps to the "show.html.erb", so you can move your logic in show.html.erb to show action
but now you need to be aware of variable scope, use @variable
at the end of the controller, you need to do redirect_to or render "sth_else", otherwise you will render default!
also use show action, show people the params[:id]


1. talk about before_filter, and then tell people see more on http://guides.rubyonrails.org/action_controller_overview.html#filters
   I need to talk about filter, use before_fillter, @post=Post.find(params[:id])
1. Talk about params[] in details, but move "session and cookie and flash and user auth" to another video, see more: http://guides.rubyonrails.org/action_controller_overview.html#parameters
1. mention session, but do not talk

1. a controller doesn't have to talk with db, but it should produce sth at least, so 
   Tell people about format.js/json/html stuff
   you can not talk about controller without talking about view

1. controller can render a view, but it can also do redirecting
   http://www.lynda.com/home/Player.aspx?lpk4=75181&playChapter=True

   A redirect is ANOTHER request, that is to say, all you've done before is already lost when you are in the second request
   render action => "new", is confusing, cause it does not run any code in new action

1. show the graph, tell people controller is here to control things
   do what he is told to do, geting info from db, rendering the templates(view)

   @instance_variable is the pipeline from the controller to the view.
   from db-model->controller, user self.some_function

   controller can not get something backfrom the view.

1. You do CRUD in controller's that's a bit confusing!
   http://www.lynda.com/home/Player.aspx?lpk4=75218&playChapter=True
   but in controller's create=new+create update=edit+update...

   talk more about delete->detroy things, people get confused why they need to add "method=> delete" in their view.

1. on the main doc page: http://guides.rubyonrails.org/action_controller_overview.html
   A lot of the stuff is talking about 
     1. params[]
     1. session&cookie
     1. form
     1. filter
     1.  Request Forgery Protection
     1. Request and Response Objects
     1. execpetion handling

  All of the above are very imporatant, but they won't help the new users understand the whole picture
  So I will talk about things to help people get a overview of how pieces fit together, like
    
    1. set layout for specific controller
    1. application_controller
    1. how to talk to model
    1. how to talk to db
    1. how to send data to view
    1. self.xxx in model
    1. xxx

