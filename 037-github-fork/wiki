<<<<<<< HEAD
1. good ref
   https://github.com/blog/712-pull-requests-2-0

1. tell people there are actually more than one way to do collaboration
    https://help.github.com/articles/using-pull-requests
    show people the two model here, but we only talk about one: fork&pull

old episode: http://happycasts.net/episodes/12?autoplay=true
you fork, and you clone, but you never work on the master branch of your clone, you create featherx to work on
=======
1. what is a fork & PR, refs:
   https://help.github.com/ -> fork -> PR
>>>>>>> a9aeba63c67d4ce4d4b0e8c32f4befcb30697c4e

   1. do mention two contribute model
   
1. a over-simplified workflow

   1. the contributor 
      fork->clone get the code
      edit on master, then send the PR
      after merged, delete the repo


   1. the dictator
      see the PR
      git pull full-git-url master
      # check and test the code
      git push origin master

1. the contributor's workflow

   1. you get interest in some project, go there, click "fork" to get your own copy
   1. clone to your fork (copy) to your machine

          git check -b featureX
          # edit 
          git commit
          git checkout master
          git add upstream xxx
          git pull upstream master
          git checkout featureX
          git rebase master
          # test
          git push origin featureX
    1. now sent the pullR, and wait to be merged

1. the upstream owner's work flow

   1. get the pull request; never just click the "merge" button, well instead do a local pull+test first

          cd his_clone/
          git checkout -b test_featureX # never do the work on master, even you can
          git remote add contibutor_name xxx
          git pull contributor_name featureX 
          # test, have some question, go to the issuePage and talk
          git checkout master
          git merge test_featureX
          git push origin master

   1. now done!

1. the contributor again

   1. check the PR is merged
      
          git checkout master
          git pull upstream master # the local master is alwasy following upstream master
          git push origin :featherX

   1. now done
          

1. web interace, if time is now enough, just say: 
   "they are only used in simple cases to automize the whole flow a bit, not even worth trying"
   ref: http://happycasts.net/episodes/12

   1. don't use github merge button! cause it's `git merger --no-ff`
      so even a PR is fastfowardable, it will still create a merge commit, as show here: 
           http://happycasts.net/episodes/12?autoplay=true

   1. do not talk about the stupid web-interface fork&edit at first, 
      cause it just confuse newbies, you can metion it at the end of the video at the end however.
   1. you can try "edit" button on webpage, to do fork->edit->pullR smipler
