1. screen and tumx
1. Git object model

   `Git communit Book` has really nice talk on this.( + "RAW GIT" in last part of the book, will be nicer)
   http://blip.tv/scott-chacon/c5-git-browsing-4113562

    and also "disributed workflow" in this book also makes a nice episode

1. git teasing talk
   git-scm.org/about

   Linus git talk: 0:24:02: centralized system will result in huge commits and this is horriable. Because during all the two weeking while you are making the patch, other people can not check your changes.

1. Tech Talk: Linus Torvalds on git

   1. 0:15:25 everytime you disconnect your laptop and start working on it, you are on your own branch
   1. we like branches so much, some people have 5 or 10 branches ( Peter: Yes, if you know how to merge)

1. git resources:

   gitreal.codeschool.com


YOUTUBE: Git: Tips and Tricks for Ruby Teams
http://www.youtube.com/watch?v=Z2ZL14WWEJI

1. gitconfig

   l = log --online --decorate --graph 
   fixup =  commit --amend -C HEAD
   untacked-files = ls-files -o --exclude-standard
   ignored-files = ls-files --others -i --exclude-standard
   modified-files = ls-files -m


1. git add -p
   has `s` for split a hunk in to small ones
   has `e` for editing a patch

   git checkout -p is the going-back of this

1. git remove trailing spaces

       git config --global apply.whitespace fix

1, set `git pull --rebase` as defualt

1. only push the current branch ( `git push`) defualt behavior is to push ALLLLL branches

      git push --global push.default tracking

1. New feature!!!

       git check -b new-feature
       # work on it, commit it anyway, even there is two ideas go in one
       # commit, having a lot of WIP commits

then istead of doing `rebase -i` you do `git reset master-head`+`git add -p`, cause this way you only need to do the pick and choose seriously at the end
you don't have to commit the patches for two ideas separatly as you do before while using `git reabse -i`, so a much better/natural/simple solution
       
