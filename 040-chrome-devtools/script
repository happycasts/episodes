1. HTML+CSS: copy buttons from github
   1. first, goto happycasts.net, show sth, then goto copy buttons and do js things
   1. right-click -> inspect element
      1. It's a web app, that means its in Js&CSS&html, no C++ stuff
         1. so that you can use Ctrl-++/-- to zoon in/out, just like you do to webpages
         1. It's funny that the author of devtool, use devtool to build devtool
            https://developers.google.com/chrome-developer-tools/docs/videos
            2012 seesion google/IO
      1. It's like firebug to firefox, but it's build right into chrome, so no installation needed

   1. it's no big deal, but it's big deal to be able to edit right in your browser, and get feedbak instantly
      1. go to happycasts.org, click on "comments" do some editing there,( no change-> deploy needed)
      1. double click to add css styling, tab works, also tab to autocomplete.

           back<tab> # give you background
           background: papa<tab> # bring you the full color name

      1. click the block after `color:`, you can try all kinds of colors, and see the effect right there
      1. remove Node is cool
      1. rightclick to see "local modification", refresh then all your changes gone, so be careful as well
         1. FIXME: how to get this work with uglified css and js
         1. you need to "ctrl-s" to save it before you get check local modification

      1. Setting -> General -> show user agent style
      1. you can uncheck each styling, and you can click to add new styling
      1. "Element -> Metrics" very helpful to check paddings margins...
         1. never been easier to learn layout ( click on a size, say "19px", then use arrow up or down)
      1. drag my "comment" buttton to the top of the sidebar at happycasts.net
         1. hit "+" to add a css anchor somewhere
         1. right click to edit as html to see the feedback
      1. 'element.style{}' shows inline styling, so usually show be empty
      1. sometimes the style of a:hover and some  gradient won't show up in "inspect Element"
         1. you get them by check "hover", or "computed style"
         1. you can easily get the original file by click the link in the side pane


1. JS + console

   1. pretty print js in "sources" tab
   1. inspect element -> click the head->js file -> you will be warned if you have errors in ur js code, cooool
   1. set a breakpoint by just clicking on the line number
      1. set "Dom break point" is super useful
      1. you can also pause js by setting "event listener break point", Soureces -> open a js file -> set a "mouse click"
      1. but the issue is things always stop in jquery, and it's hard to go out to my own js files, what to do?
         A: step over next funtion call, instead of "step into next funtion call"

    1. the console rocks as well
       1. do sth

              $('click_here').click()
              $('click_here').innerHTML = 'hi'

              var text = $0
              setInterval( function() { text.textContent = parseInt(text.textContent) - 1; }, 1000);
              console.log(document.getElementById('click_here'));
              monitorEvents($$('a')[0]) //so so cool
              monitorEvents($$('textarea')[0], 'key') //ignore "mouse" events, only log key events
              monitorEvents($0, 'mouse') //ignore "key" events

       1. commandline APT -- from firebug : http://getfirebug.com/wiki/index.php/Command_Line_API
              
              $0  # the element I selected
              $0.outerHTML
              copy($0.outerHTML)

              dir(document.body)


1. TIMELINE + network + ...

   1. networking
      https://developers.google.com/chrome-developer-tools/docs/network
      Both 'networking' and 'timeline' are part of "Delivering to the client"

      1. blueline: Doucument ready(DOM content event fired); redline: load  event fired( all the images and iframes to finish)
      1. for each "request", there is a entry in network pannel
      1. so this is "loadtime"
      1. XHR: xml+http+resources: sth has to do with ajax

   1. timeline
      https://developers.google.com/chrome-developer-tools/docs/timeline

      1. "when we intersted in what's happening after the page load, we can look at the timeline"
      1. "The Timeline panel gives you a complete overview of where time is spent when loading and using your web app or page. All events, from loading resources to parsing JavaScript, calculating styles, and repainting are plotted on a timeline."
      1. time spend to render the page after timeline
      1. javascript time: loading -> scripting -> rendering -> painting
   1. audit
      1. show audit with happycast.net, truely useful suggestions

