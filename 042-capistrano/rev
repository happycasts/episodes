   
1. railscasts's unicorn_init.sh is used to auto start unicorn when the server reboot
   but you need to run this first (17:23)
    sudo update-rc.d unicorn_blog default
1. add deploy keys, very important
1. Not so important stuff, but can be handy, see if I have time left for this? 
    1. Vim on server is slow
       So can I upload my database.yml to server?
       1. you only need to do it once, so it doesn't matter so much
       1. On the other hand, knowing this does not add complexity, so it's cool to know and use.
1. What't the point to have 

       Shared current relase
1. https://github.com/capistrano/capistrano/wiki/2.x-Getting-Started

    By default, a task will be executed on all servers in all roles, so we
    were able to drop the :hosts declaration from the tasks. Much simpler!


1. https://github.com/capistrano/capistrano/wiki/2.x-from-the-beginning

    The default Capfile generated by capify is pretty minimal. All it does is
    load “config/deploy.rb”...  In general, you’ll leave the Capfile alone and
    do all your tweaking in config/deploy.rb. If you were using Capistrano in
    a non-Rails environment, though, you’d probably have only a Capfile, with
    no config/deploy.rb at all. 

    set :use_sudo, false. By default, Capistrano will try to use sudo to do
    certain operations (setting up your servers, restarting your application,
            etc.). If you are on a shared host, sudo might be unavailable to
    you, or maybe you just want to avoid using sudo.


    cap -T;cap -e xxx
    cap deploy:check #very sweet, run `cap -e` on it first, and then run it can check the stdout, 
                     # this is also the easist way to learn any cap task

   1. Deployment Directory Structure
   1. Still don't quit get app layer and cap deploy:cold stuff

1. if you are deploying your app for the first time, of course you need to restart nginx as well, since you just added a new site-enabled/ entry!!
   1. a subtle error about  this
      1. if you once have nginx know about blog, then you delete blog/, and do a redeploy
         now nginx still remember the Domain name point to the right place. so everything seems to be working, untill you find out, all the static assets(served by nginx) will be a 404 in the browser!!
         1. it's like you can not find assets/appl.232423423.css, even it is just there


1. so the flow is like this
   1. you call `cap deploy:setup`
      edit database.yml, create `blog_production` db
   1. change Capfile to handle asset-pipeline, add a line in deploy.rb to handle bundler
   1. you call `cap deploy:migration`
      this will first migrate all the db tables, then do a `cap deploy`
      unicorn_init.sh is called with in 'cap deploy:restart' as part of 'cap deploy'

   1. now point your brower to the url, it won't work
      cause you just edited nginx config(add site-enabled/blog), so you have to restart nginx
   1. now everything show work fine

1. by default what `cap deploy` does is very minimum
   1. get the code
   1. restart the server
   1. won't handle db:migration, cause you don't always change db
   1. won't handle assets:precompile, cause a lot people prefer compile it locally
   1. won't run bundler, cause you don't change Gemfile all the time
   1. So it's wise of `cap deploy` not trying to do more than the basic, 
      cause it will be fast this way
