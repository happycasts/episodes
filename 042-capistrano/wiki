Do sth that is not covered in Railscasts episodes, sth really simple and fill the need of real basic usage
1. Code is the final documetation!!!
   1. if you don't know a default value of certain variable
      cd `bundle show cap`; xxx current_path

133-cap-tasks-revised: very nice intro of the basics, what is a task, what is a role...
337 cap recipes: not for beginners, but of great practical use after you pass the beginning

A nice tool is nice in that it encourages a very best common practices, nice workflows, that's why it worth while to learn a tool, rather than build it up from scrach.
And since we are following same workflows, it's now easier to communation within or outside our team.

https://help.github.com/articles/deploying-with-capistrano
1. ruby-china does unicorn restart right in deploy.rb, also nice
1. in Ep38, a lot of the commands about installing things, capistrano can handle installation too, but we won't cover that in this episode
1. have to run 'rake db:create RAILS_ENV=production' manually
   all the tasks "cap deploy" "cap deploy:migrate" "cap deploy:setup" won't do it for me!!!

1. "rake assets:precompile" won't be done either
    I know I need to add some options in deploy.rb

1. capistrano's flow demystified: check pdf here: https://github.com/capistrano/capistrano/wiki/2.x-Default-Deployment-Behaviour

1. https://github.com/capistrano/capistrano/wiki/2.x-Getting-Started

    By default, a task will be executed on all servers in all roles, so we
    were able to drop the :hosts declaration from the tasks. Much simpler!

1. https://github.com/capistrano/capistrano/wiki/2.x-from-the-beginning

    The default Capfile generated by capify is pretty minimal. All it does is
    load “config/deploy.rb”...  In general, you’ll leave the Capfile alone and
    do all your tweaking in config/deploy.rb. If you were using Capistrano in
    a non-Rails environment, though, you’d probably have only a Capfile, with
    no config/deploy.rb at all. 

    set :use_sudo, false. By default, Capistrano will try to use sudo to do
    certain operations (setting up your servers, restarting your application,
            etc.). If you are on a shared host, sudo might be unavailable to
    you, or maybe you just want to avoid using sudo.


    cap -T;cap -e xxx
    cap deploy:check #very sweet, run `cap -e` on it first, and then run it can check the stdout, 
                     # this is also the easist way to learn any cap task

   1. Deployment Directory Structure
   1. Still don't quit get app layer and cap deploy:cold stuff

We don't talk about cap basics here, check rc#cap tasks 
We talk about a minim deployment task transferring
What I want to do(in my shell script ) to cap tasks.

With your project getting large, you need to bring more tricks in, check docs for more info, and also when you deploy.rb gets really complex, it's better to rc#cap recipes.

    Rake assets:precompile
    Rake db: migrate # cap deploy:migrate
    Unicorn restart # mostly we don't need to restart ngnix, right?
    Apache restart # this will restart passenger as well right
    Database.yml, symlinks,

1. What't the point to have 

       Shared current relase

1. add deploy keys, very important

1. Not so important stuff, but can be handy, see if I have time left for this? 
    1. Vim on server is slow
       So can I upload my database.yml to server?
       1. you only need to do it once, so it doesn't matter so much
       1. On the other hand, knowing this does not add complexity, so it's cool to know and use.
