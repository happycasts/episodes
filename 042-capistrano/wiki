Do sth that is not covered in Railscasts episodes, sth really simple and fill the need of real basic usage

133-cap-tasks-revised: very nice intro of the basics, what is a task, what is a role...
337 cap recipes: not for beginners, but of great practical use after you pass the beginning

A nice tool is nice in that it encourages a very best common practices, nice workflows, that's why it worth while to learn a tool, rather than build it up from scrach.
And since we are following same workflows, it's now easier to communation within or outside our team.

https://help.github.com/articles/deploying-with-capistrano

1. capistrano's flow demystified: check pdf here: https://github.com/capistrano/capistrano/wiki/2.x-Default-Deployment-Behaviour

1. https://github.com/capistrano/capistrano/wiki/2.x-Getting-Started

    By default, a task will be executed on all servers in all roles, so we
    were able to drop the :hosts declaration from the tasks. Much simpler!

1. https://github.com/capistrano/capistrano/wiki/2.x-from-the-beginning

    The default Capfile generated by capify is pretty minimal. All it does is
    load “config/deploy.rb”...  In general, you’ll leave the Capfile alone and
    do all your tweaking in config/deploy.rb. If you were using Capistrano in
    a non-Rails environment, though, you’d probably have only a Capfile, with
    no config/deploy.rb at all. 

    set :use_sudo, false. By default, Capistrano will try to use sudo to do
    certain operations (setting up your servers, restarting your application,
            etc.). If you are on a shared host, sudo might be unavailable to
    you, or maybe you just want to avoid using sudo.


    cap -T;cap -e xxx
    cap deploy:check #very sweet, run `cap -e` on it first, and then run it can check the stdout, 
                     # this is also the easist way to learn any cap task

   1. Deployment Directory Structure
   1. Still don't quit get app layer and cap deploy:cold stuff
