1. http
   http://www.jmarshall.com/easy/http/
1. curl
   how can you claim yourself a web developer, if you don't know curl
   also checkout restful_client
1. git
git 的课程以及 github 的使用，我觉得可以帮助很多找工作的学生来撰写简历，受众面和影响力会更大一些。
李明给的建议，要的是一套hpcasts 的课。


1. Rails
   1. tell people about rails project dir structure will make a good video for beginner course
   http://www.lynda.com/home/Player.aspx?lpk4=75174&playChapter=True
# need a roadmap, to guide newbies through all the videos
# a list of video Just for beginners
  this will be for hpcasts.com

# Cookies & local storage
caniuse.com
# open video html5 video
http://www.kaltura.org/

also check EP043
# bash
http://wiki.bash-hackers.org/scripting/newbie_traps
# mongodb
http://happycasts.net/episodes/40
# postgresql
http://happycasts.net/episodes/39
# where is my ruby doc?
maybe this is will be for railscasts-china

    pry(main)> show-doc Array#select

# from knwang
我对这个还有Chef, Puppet这些都感兴趣， @happypeter 有计划做这些的 Screencast 么

# Mac or Linux, which is the dev workstation for us
http://ruby-china.org/topics/5300

# github basic contribute workflow
http://www.youtube.com/watch?v=rsnodzi2ULM
Tom:
A bisic: create+fork+pull request+cherry-pick workflow
Chris:
Why distributed? A very intellegent talk
Scott:
`rebase onto` really cool 00:49:04
change Email for all commits

    git filter-branch --env-filter "export GIT_AUTHOR_EMAIL=you@you.com" HEAD

`git bisect` is simple and helpful
`.gitattribes` make img diff for you, very useful info shown in the diff result

# what is a "change" in diff/git world

  show people the `7lines` rule, when talking about git merging
  what's a conflict

# emacs manual

 我的github账号是 https://github.com/Teddy-ma
 博客 http://javaer.me

 关于开源文档的问题,你的那个视频我已经看过了
 我说个具体的问题吧,我正在翻译神器emacs的官方手册
 http://www.gnu.org/software/emacs/manual/emacs.html
 我在上述地址下载了手册的源码,可是完全无法编译
 我也看过你视频中的关于texlive等工具的介绍
 也自己上网搜索了一些关于Texinfo等工具(格式)的介绍
 可是还是无法成功编译,当然写成mardown格式也可以
 但我还是希望可以和原版原汁原味的感觉
 如果有空的话,请指导一下我这个小菜鸟吧:)




# pkg package, apt-get

    aptitude search cscope

1. `yum list` can list all the packages in the YUM repo, what's thet apt-get counterpart?

# for happycast, buffer or tab
http://ruby-china.org/topics/1271
# http://ruby-china.org/topics/1178
一起来动手写个gem

# revise github-pages
http://hi.baidu.com/quvia/item/077546dbdf60caf1cb0c3997

# others
OOP demisistified -- requested by Zhanglu
keyword subscribable -- if somebody only interested in vim, or git

account of happypeter.org does not work at happycasts.net


# git workflow
now I think I need to modify my gitworkflow a bit, now I do all the tiny commits, which is both good and bad.
It is good in that, by having all the little steps, I am always allowed to try stupid code. Bad is that I end up having too much moise in my history, which makes even myself painful, in later dev.

So I think to fix this:

    1. think about what I do this time
    2. submit a github issue for this
    3. git br -d feather-x
    4. do my micro-commits on this branch
    5. git rebase -i master
    6. have "#10" to track with the issue

1. screen and tumx
1. Git object model

   `Git communit Book` has really nice talk on this.( + "RAW GIT" in last part of the book, will be nicer)
   http://blip.tv/scott-chacon/c5-git-browsing-4113562

    and also "disributed workflow" in this book also makes a nice episode

1. git teasing talk
   git-scm.org/about

   Linus git talk: 0:24:02: centralized system will result in huge commits and this is horriable. Because during all the two weeking while you are making the patch, other people can not check your changes.

1. Tech Talk: Linus Torvalds on git

   1. 0:15:25 everytime you disconnect your laptop and start working on it, you are on your own branch
   1. we like branches so much, some people have 5 or 10 branches ( Peter: Yes, if you know how to merge)

1. git resources:

   gitreal.codeschool.com


YOUTUBE: Git: Tips and Tricks for Ruby Teams
http://www.youtube.com/watch?v=Z2ZL14WWEJI

1. gitconfig

   l = log --online --decorate --graph 
   fixup =  commit --amend -C HEAD
   untacked-files = ls-files -o --exclude-standard
   ignored-files = ls-files --others -i --exclude-standard
   modified-files = ls-files -m


1. git add -p
   has `s` for split a hunk in to small ones
   has `e` for editing a patch

   git checkout -p is the going-back of this

1. git remove trailing spaces

       git config --global apply.whitespace fix

1, set `git pull --rebase` as defualt

1. only push the current branch ( `git push`) defualt behavior is to push ALLLLL branches

      git push --global push.default tracking

1. New feature!!!

       git check -b new-feature
       # work on it, commit it anyway, even there is two ideas go in one
       # commit, having a lot of WIP commits

then istead of doing `rebase -i` you do `git reset master-head`+`git add -p`, cause this way you only need to do the pick and choose seriously at the end
you don't have to commit the patches for two ideas separatly as you do before while using `git reabse -i`, so a much better/natural/simple solution
       

## a really nice workflow
http://ruby-china.org/topics/4768
http://blog.hashrocket.com/posts/feature-development-with-git-branching

http://ruby-china.org/knwang

    需要在branch上很久的时候多半是要完成一整块的feature set才能整合在master里面， 比如，凡是涉及到付费的时候就要把很多情形考虑到做完才能一起deploy。可以每做完一小块测试通过后就git checkout master; git pull --rebase origin master; git checkout my_branch; git rebase master

    这样先把远程master别人的代码拿下来，再rebase到自己的branch上面。再跑测试。 通过了之后git push origin my_branch, 这样就不用担心比如电脑掉到水坑里，或者需要别人接着做这个大feature set. 再继续做下一小块。原因还是每次集成少量代码，有问题早解决。而remote branch伤得的commit message也可以作为一种和同事的交流工具，让别人知道你做到哪里。

    等到feature set做完, 还是一样git checkout master; git pull --rebase origin master; git checkout my_branch, git rebase master; run test; git checkout master; git merge my_branch (fast forward); git push origin master; deploy

    总结下，

    1) 所有developer的本地master都紧跟remote master，而且都是working code, 随时可以deploy
    2) 本地上推前先抓remote master， 整合测试通过后从local master push remote master, no conflict.
    3) push/deploy often, push/deploy early
    4) remote branches做备份和交流

    要是出现了几个long living branch又都不能很快deploy的时候就比较复杂，可以考虑再开一个非master的integration branch. 但这种情况一旦出现更多的是整个项目的筹划出了问题。


on `my_feature` branch

    git reset --soft HEAD^^^
    git add -p
